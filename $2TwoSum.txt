Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?


--------------------------Solution Explanation----------------
1) BrutForce approch:During the first attempt  we use brutforce approch.
First we check that if there are only size is two then answer is [0,1] 
becuase in problem statement its mentioned that it has solution in the array so we checked it directly.

--> Let says array is [1,5,7,10,12] and target is :17
We use two for loops : and inside that we again go with another for loop
size is 5 our first array can traverse from 0 index to 3 index mean : -> arr.length-2; i<=arr.length-2;

--The second array always start from i+1  and go till last element that is arr.length-1;
-- Check condition if(target == num[i]+ num[j]) then set indices 0 =i and 1=j;
 
 ------------------------------------------------------